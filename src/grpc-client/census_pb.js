// source: census.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (typeof self == "undefined" ? typeof global == "undefined"? this : global : self);

goog.exportSymbol('proto.dataexplorer.CensusFeature', null, global);
goog.exportSymbol('proto.dataexplorer.CensusResolution', null, global);
goog.exportSymbol('proto.dataexplorer.DatasetEntry', null, global);
goog.exportSymbol('proto.dataexplorer.DatasetRequest', null, global);
goog.exportSymbol('proto.dataexplorer.DatasetRequest.Dataset', null, global);
goog.exportSymbol('proto.dataexplorer.DatasetResponse', null, global);
goog.exportSymbol('proto.dataexplorer.Decade', null, global);
goog.exportSymbol('proto.dataexplorer.IntraDatasetOp', null, global);
goog.exportSymbol('proto.dataexplorer.OsmRequest', null, global);
goog.exportSymbol('proto.dataexplorer.OsmRequest.Dataset', null, global);
goog.exportSymbol('proto.dataexplorer.OsmResponse', null, global);
goog.exportSymbol('proto.dataexplorer.Predicate', null, global);
goog.exportSymbol('proto.dataexplorer.Predicate.ComparisonOperator', null, global);
goog.exportSymbol('proto.dataexplorer.SpatialOp', null, global);
goog.exportSymbol('proto.dataexplorer.SpatialRequest', null, global);
goog.exportSymbol('proto.dataexplorer.SpatialResponse', null, global);
goog.exportSymbol('proto.dataexplorer.TargetedCensusRequest', null, global);
goog.exportSymbol('proto.dataexplorer.TargetedCensusResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.DatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.DatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.DatasetRequest.displayName = 'proto.dataexplorer.DatasetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.DatasetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.DatasetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.DatasetResponse.displayName = 'proto.dataexplorer.DatasetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.OsmRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.OsmRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.OsmRequest.displayName = 'proto.dataexplorer.OsmRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.OsmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.OsmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.OsmResponse.displayName = 'proto.dataexplorer.OsmResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.SpatialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.SpatialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.SpatialRequest.displayName = 'proto.dataexplorer.SpatialRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.SpatialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.SpatialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.SpatialResponse.displayName = 'proto.dataexplorer.SpatialResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.DatasetEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.DatasetEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.DatasetEntry.displayName = 'proto.dataexplorer.DatasetEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.TargetedCensusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.TargetedCensusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.TargetedCensusRequest.displayName = 'proto.dataexplorer.TargetedCensusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.TargetedCensusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.TargetedCensusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.TargetedCensusResponse.displayName = 'proto.dataexplorer.TargetedCensusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataexplorer.Predicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataexplorer.Predicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataexplorer.Predicate.displayName = 'proto.dataexplorer.Predicate';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.DatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.DatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.DatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.DatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestparamsMap: (f = msg.getRequestparamsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.DatasetRequest}
 */
proto.dataexplorer.DatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.DatasetRequest;
  return proto.dataexplorer.DatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.DatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.DatasetRequest}
 */
proto.dataexplorer.DatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dataexplorer.DatasetRequest.Dataset} */ (reader.readEnum());
      msg.setDataset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    case 3:
      var value = /** @type {!proto.dataexplorer.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    case 4:
      var value = msg.getRequestparamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.DatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.DatasetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.DatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.DatasetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequestparamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.dataexplorer.DatasetRequest.Dataset = {
  HOSPITALS: 0,
  DAMS: 1,
  ELECTRICAL_SUBSTATIONS: 2,
  TRANSMISSION_LINES: 3,
  NATURAL_GAS_PIPELINES: 4,
  POWER_PLANTS: 5
};

/**
 * optional Dataset dataset = 1;
 * @return {!proto.dataexplorer.DatasetRequest.Dataset}
 */
proto.dataexplorer.DatasetRequest.prototype.getDataset = function() {
  return /** @type {!proto.dataexplorer.DatasetRequest.Dataset} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dataexplorer.DatasetRequest.Dataset} value
 * @return {!proto.dataexplorer.DatasetRequest} returns this
 */
proto.dataexplorer.DatasetRequest.prototype.setDataset = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string requestGeoJson = 2;
 * @return {string}
 */
proto.dataexplorer.DatasetRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.DatasetRequest} returns this
 */
proto.dataexplorer.DatasetRequest.prototype.setRequestgeojson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SpatialOp spatialOp = 3;
 * @return {!proto.dataexplorer.SpatialOp}
 */
proto.dataexplorer.DatasetRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.dataexplorer.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.dataexplorer.SpatialOp} value
 * @return {!proto.dataexplorer.DatasetRequest} returns this
 */
proto.dataexplorer.DatasetRequest.prototype.setSpatialop = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * map<string, string> requestParams = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.dataexplorer.DatasetRequest.prototype.getRequestparamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.dataexplorer.DatasetRequest} returns this
 */
proto.dataexplorer.DatasetRequest.prototype.clearRequestparamsMap = function() {
  this.getRequestparamsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.DatasetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.DatasetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.DatasetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.DatasetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.DatasetResponse}
 */
proto.dataexplorer.DatasetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.DatasetResponse;
  return proto.dataexplorer.DatasetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.DatasetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.DatasetResponse}
 */
proto.dataexplorer.DatasetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.DatasetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.DatasetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.DatasetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.DatasetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.dataexplorer.DatasetResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.DatasetResponse} returns this
 */
proto.dataexplorer.DatasetResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.OsmRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.OsmRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.OsmRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.OsmRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestparamsMap: (f = msg.getRequestparamsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.OsmRequest}
 */
proto.dataexplorer.OsmRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.OsmRequest;
  return proto.dataexplorer.OsmRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.OsmRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.OsmRequest}
 */
proto.dataexplorer.OsmRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dataexplorer.OsmRequest.Dataset} */ (reader.readEnum());
      msg.setDataset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    case 3:
      var value = /** @type {!proto.dataexplorer.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    case 4:
      var value = msg.getRequestparamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.OsmRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.OsmRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.OsmRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.OsmRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequestparamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.dataexplorer.OsmRequest.Dataset = {
  POINTS: 0,
  LINES: 1,
  MULTI_LINES: 2,
  MULTI_POLYGONS: 3
};

/**
 * optional Dataset dataset = 1;
 * @return {!proto.dataexplorer.OsmRequest.Dataset}
 */
proto.dataexplorer.OsmRequest.prototype.getDataset = function() {
  return /** @type {!proto.dataexplorer.OsmRequest.Dataset} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dataexplorer.OsmRequest.Dataset} value
 * @return {!proto.dataexplorer.OsmRequest} returns this
 */
proto.dataexplorer.OsmRequest.prototype.setDataset = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string requestGeoJson = 2;
 * @return {string}
 */
proto.dataexplorer.OsmRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.OsmRequest} returns this
 */
proto.dataexplorer.OsmRequest.prototype.setRequestgeojson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SpatialOp spatialOp = 3;
 * @return {!proto.dataexplorer.SpatialOp}
 */
proto.dataexplorer.OsmRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.dataexplorer.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.dataexplorer.SpatialOp} value
 * @return {!proto.dataexplorer.OsmRequest} returns this
 */
proto.dataexplorer.OsmRequest.prototype.setSpatialop = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * map<string, string> requestParams = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.dataexplorer.OsmRequest.prototype.getRequestparamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.dataexplorer.OsmRequest} returns this
 */
proto.dataexplorer.OsmRequest.prototype.clearRequestparamsMap = function() {
  this.getRequestparamsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.OsmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.OsmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.OsmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.OsmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.OsmResponse}
 */
proto.dataexplorer.OsmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.OsmResponse;
  return proto.dataexplorer.OsmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.OsmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.OsmResponse}
 */
proto.dataexplorer.OsmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.OsmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.OsmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.OsmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.OsmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.dataexplorer.OsmResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.OsmResponse} returns this
 */
proto.dataexplorer.OsmResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.SpatialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.SpatialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.SpatialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.SpatialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    censusresolution: jspb.Message.getFieldWithDefault(msg, 1, 0),
    censusfeature: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 3, ""),
    spatialop: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.SpatialRequest}
 */
proto.dataexplorer.SpatialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.SpatialRequest;
  return proto.dataexplorer.SpatialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.SpatialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.SpatialRequest}
 */
proto.dataexplorer.SpatialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dataexplorer.CensusResolution} */ (reader.readEnum());
      msg.setCensusresolution(value);
      break;
    case 2:
      var value = /** @type {!proto.dataexplorer.CensusFeature} */ (reader.readEnum());
      msg.setCensusfeature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    case 4:
      var value = /** @type {!proto.dataexplorer.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.SpatialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.SpatialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.SpatialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.SpatialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCensusresolution();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCensusfeature();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional CensusResolution censusResolution = 1;
 * @return {!proto.dataexplorer.CensusResolution}
 */
proto.dataexplorer.SpatialRequest.prototype.getCensusresolution = function() {
  return /** @type {!proto.dataexplorer.CensusResolution} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dataexplorer.CensusResolution} value
 * @return {!proto.dataexplorer.SpatialRequest} returns this
 */
proto.dataexplorer.SpatialRequest.prototype.setCensusresolution = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CensusFeature censusFeature = 2;
 * @return {!proto.dataexplorer.CensusFeature}
 */
proto.dataexplorer.SpatialRequest.prototype.getCensusfeature = function() {
  return /** @type {!proto.dataexplorer.CensusFeature} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.dataexplorer.CensusFeature} value
 * @return {!proto.dataexplorer.SpatialRequest} returns this
 */
proto.dataexplorer.SpatialRequest.prototype.setCensusfeature = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string requestGeoJson = 3;
 * @return {string}
 */
proto.dataexplorer.SpatialRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.SpatialRequest} returns this
 */
proto.dataexplorer.SpatialRequest.prototype.setRequestgeojson = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SpatialOp spatialOp = 4;
 * @return {!proto.dataexplorer.SpatialOp}
 */
proto.dataexplorer.SpatialRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.dataexplorer.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.dataexplorer.SpatialOp} value
 * @return {!proto.dataexplorer.SpatialRequest} returns this
 */
proto.dataexplorer.SpatialRequest.prototype.setSpatialop = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.SpatialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.SpatialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.SpatialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.SpatialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responsegeojson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.SpatialResponse}
 */
proto.dataexplorer.SpatialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.SpatialResponse;
  return proto.dataexplorer.SpatialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.SpatialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.SpatialResponse}
 */
proto.dataexplorer.SpatialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsegeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.SpatialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.SpatialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.SpatialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.SpatialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponsegeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.dataexplorer.SpatialResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.SpatialResponse} returns this
 */
proto.dataexplorer.SpatialResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string responseGeoJson = 2;
 * @return {string}
 */
proto.dataexplorer.SpatialResponse.prototype.getResponsegeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.SpatialResponse} returns this
 */
proto.dataexplorer.SpatialResponse.prototype.setResponsegeojson = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.DatasetEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.DatasetEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.DatasetEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.DatasetEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    entry: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.DatasetEntry}
 */
proto.dataexplorer.DatasetEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.DatasetEntry;
  return proto.dataexplorer.DatasetEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.DatasetEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.DatasetEntry}
 */
proto.dataexplorer.DatasetEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.DatasetEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.DatasetEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.DatasetEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.DatasetEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string entry = 1;
 * @return {string}
 */
proto.dataexplorer.DatasetEntry.prototype.getEntry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.DatasetEntry} returns this
 */
proto.dataexplorer.DatasetEntry.prototype.setEntry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.TargetedCensusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.TargetedCensusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.TargetedCensusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.TargetedCensusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolution: jspb.Message.getFieldWithDefault(msg, 1, 0),
    predicate: (f = msg.getPredicate()) && proto.dataexplorer.Predicate.toObject(includeInstance, f),
    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.TargetedCensusRequest}
 */
proto.dataexplorer.TargetedCensusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.TargetedCensusRequest;
  return proto.dataexplorer.TargetedCensusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.TargetedCensusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.TargetedCensusRequest}
 */
proto.dataexplorer.TargetedCensusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dataexplorer.CensusResolution} */ (reader.readEnum());
      msg.setResolution(value);
      break;
    case 2:
      var value = new proto.dataexplorer.Predicate;
      reader.readMessage(value,proto.dataexplorer.Predicate.deserializeBinaryFromReader);
      msg.setPredicate(value);
      break;
    case 3:
      var value = /** @type {!proto.dataexplorer.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.TargetedCensusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.TargetedCensusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.TargetedCensusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.TargetedCensusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolution();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPredicate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dataexplorer.Predicate.serializeBinaryToWriter
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional CensusResolution resolution = 1;
 * @return {!proto.dataexplorer.CensusResolution}
 */
proto.dataexplorer.TargetedCensusRequest.prototype.getResolution = function() {
  return /** @type {!proto.dataexplorer.CensusResolution} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dataexplorer.CensusResolution} value
 * @return {!proto.dataexplorer.TargetedCensusRequest} returns this
 */
proto.dataexplorer.TargetedCensusRequest.prototype.setResolution = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Predicate predicate = 2;
 * @return {?proto.dataexplorer.Predicate}
 */
proto.dataexplorer.TargetedCensusRequest.prototype.getPredicate = function() {
  return /** @type{?proto.dataexplorer.Predicate} */ (
    jspb.Message.getWrapperField(this, proto.dataexplorer.Predicate, 2));
};


/**
 * @param {?proto.dataexplorer.Predicate|undefined} value
 * @return {!proto.dataexplorer.TargetedCensusRequest} returns this
*/
proto.dataexplorer.TargetedCensusRequest.prototype.setPredicate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dataexplorer.TargetedCensusRequest} returns this
 */
proto.dataexplorer.TargetedCensusRequest.prototype.clearPredicate = function() {
  return this.setPredicate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataexplorer.TargetedCensusRequest.prototype.hasPredicate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SpatialOp spatialOp = 3;
 * @return {!proto.dataexplorer.SpatialOp}
 */
proto.dataexplorer.TargetedCensusRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.dataexplorer.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.dataexplorer.SpatialOp} value
 * @return {!proto.dataexplorer.TargetedCensusRequest} returns this
 */
proto.dataexplorer.TargetedCensusRequest.prototype.setSpatialop = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string requestGeoJson = 4;
 * @return {string}
 */
proto.dataexplorer.TargetedCensusRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataexplorer.TargetedCensusRequest} returns this
 */
proto.dataexplorer.TargetedCensusRequest.prototype.setRequestgeojson = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.TargetedCensusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.TargetedCensusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.TargetedCensusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.TargetedCensusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    spatialresponse: (f = msg.getSpatialresponse()) && proto.dataexplorer.SpatialResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.TargetedCensusResponse}
 */
proto.dataexplorer.TargetedCensusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.TargetedCensusResponse;
  return proto.dataexplorer.TargetedCensusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.TargetedCensusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.TargetedCensusResponse}
 */
proto.dataexplorer.TargetedCensusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dataexplorer.SpatialResponse;
      reader.readMessage(value,proto.dataexplorer.SpatialResponse.deserializeBinaryFromReader);
      msg.setSpatialresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.TargetedCensusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.TargetedCensusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.TargetedCensusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.TargetedCensusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpatialresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dataexplorer.SpatialResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional SpatialResponse spatialResponse = 1;
 * @return {?proto.dataexplorer.SpatialResponse}
 */
proto.dataexplorer.TargetedCensusResponse.prototype.getSpatialresponse = function() {
  return /** @type{?proto.dataexplorer.SpatialResponse} */ (
    jspb.Message.getWrapperField(this, proto.dataexplorer.SpatialResponse, 1));
};


/**
 * @param {?proto.dataexplorer.SpatialResponse|undefined} value
 * @return {!proto.dataexplorer.TargetedCensusResponse} returns this
*/
proto.dataexplorer.TargetedCensusResponse.prototype.setSpatialresponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dataexplorer.TargetedCensusResponse} returns this
 */
proto.dataexplorer.TargetedCensusResponse.prototype.clearSpatialresponse = function() {
  return this.setSpatialresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataexplorer.TargetedCensusResponse.prototype.hasSpatialresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataexplorer.Predicate.prototype.toObject = function(opt_includeInstance) {
  return proto.dataexplorer.Predicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataexplorer.Predicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.Predicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    censusfeature: jspb.Message.getFieldWithDefault(msg, 1, 0),
    decade: jspb.Message.getFieldWithDefault(msg, 2, 0),
    comparisonop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    comparisonvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataexplorer.Predicate}
 */
proto.dataexplorer.Predicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataexplorer.Predicate;
  return proto.dataexplorer.Predicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataexplorer.Predicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataexplorer.Predicate}
 */
proto.dataexplorer.Predicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dataexplorer.CensusFeature} */ (reader.readEnum());
      msg.setCensusfeature(value);
      break;
    case 2:
      var value = /** @type {!proto.dataexplorer.Decade} */ (reader.readEnum());
      msg.setDecade(value);
      break;
    case 3:
      var value = /** @type {!proto.dataexplorer.Predicate.ComparisonOperator} */ (reader.readEnum());
      msg.setComparisonop(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setComparisonvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataexplorer.Predicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataexplorer.Predicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataexplorer.Predicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataexplorer.Predicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCensusfeature();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDecade();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getComparisonop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getComparisonvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.dataexplorer.Predicate.ComparisonOperator = {
  EQUAL: 0,
  GREATER_THAN: 1,
  LESS_THAN: 2,
  GREATER_THAN_OR_EQUAL: 3,
  LESS_THAN_OR_EQUAL: 4
};

/**
 * optional CensusFeature censusFeature = 1;
 * @return {!proto.dataexplorer.CensusFeature}
 */
proto.dataexplorer.Predicate.prototype.getCensusfeature = function() {
  return /** @type {!proto.dataexplorer.CensusFeature} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dataexplorer.CensusFeature} value
 * @return {!proto.dataexplorer.Predicate} returns this
 */
proto.dataexplorer.Predicate.prototype.setCensusfeature = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Decade decade = 2;
 * @return {!proto.dataexplorer.Decade}
 */
proto.dataexplorer.Predicate.prototype.getDecade = function() {
  return /** @type {!proto.dataexplorer.Decade} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.dataexplorer.Decade} value
 * @return {!proto.dataexplorer.Predicate} returns this
 */
proto.dataexplorer.Predicate.prototype.setDecade = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ComparisonOperator comparisonOp = 3;
 * @return {!proto.dataexplorer.Predicate.ComparisonOperator}
 */
proto.dataexplorer.Predicate.prototype.getComparisonop = function() {
  return /** @type {!proto.dataexplorer.Predicate.ComparisonOperator} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.dataexplorer.Predicate.ComparisonOperator} value
 * @return {!proto.dataexplorer.Predicate} returns this
 */
proto.dataexplorer.Predicate.prototype.setComparisonop = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional double comparisonValue = 4;
 * @return {number}
 */
proto.dataexplorer.Predicate.prototype.getComparisonvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataexplorer.Predicate} returns this
 */
proto.dataexplorer.Predicate.prototype.setComparisonvalue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.dataexplorer.SpatialOp = {
  GEOWITHIN: 0,
  GEOINTERSECTS: 1
};

/**
 * @enum {number}
 */
proto.dataexplorer.CensusFeature = {
  TOTALPOPULATION: 0,
  MEDIANHOUSEHOLDINCOME: 1,
  POPULATIONBYAGE: 2,
  MEDIANAGE: 3,
  POVERTY: 4,
  RACE: 5
};

/**
 * @enum {number}
 */
proto.dataexplorer.IntraDatasetOp = {
  INTERSECTION: 0,
  UNION: 1,
  OVERLAP: 2
};

/**
 * @enum {number}
 */
proto.dataexplorer.CensusResolution = {
  STATE: 0,
  COUNTY: 1,
  TRACT: 2
};

/**
 * @enum {number}
 */
proto.dataexplorer.Decade = {
  _2010: 0,
  _2000: 1,
  _1990: 2,
  _1980: 3
};

goog.object.extend(exports, proto.dataexplorer);
