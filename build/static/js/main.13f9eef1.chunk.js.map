{"version":3,"sources":["sustain/grpc-client/grpc-querier.js","sustain/grpc-client/census_pb.js","sustain/grpc-client/census_grpc_web_pb.js","sustain/navbar.js","sustain/datasets.js","sustain/census-feature-selector.js","sustain/query.js","sustain/query-constructor.js","sustain/maps/power-stations-map.js","sustain/maps/natural-gas-pipelines-map.js","sustain/maps/hospitals-map.js","sustain/maps/dams-map.js","sustain/maps/transmission-lines-map.js","sustain/maps/main-map.js","sustain/main.js","App.js","index.js"],"names":["client","CensusClient","require","module","exports","makeGeoJson","southwest","northeast","geo","type","properties","geometry","coordinates","lng","lat","JSON","stringify","requestGeoJson","jspb","goog","global","self","this","exportSymbol","proto","census","DatasetRequest","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","DatasetResponse","OsmRequest","OsmResponse","SpatialRequest","SpatialResponse","DatasetEntry","TargetedCensusRequest","TargetedCensusResponse","Predicate","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","dataset","getFieldWithDefault","requestgeojson","spatialop","requestparamsMap","getRequestparamsMap","undefined","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","value","readEnum","setDataset","readString","setRequestgeojson","setSpatialop","readMessage","message","Map","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","getDataset","writeEnum","getRequestgeojson","length","writeString","getSpatialop","getLength","Dataset","HOSPITALS","DAMS","ELECTRICAL_SUBSTATIONS","TRANSMISSION_LINES","NATURAL_GAS_PIPELINES","POWER_PLANTS","setProto3EnumField","setProto3StringField","opt_noLazyCreate","getMapField","clearRequestparamsMap","clear","response","setResponse","getResponse","POINTS","LINES","MULTI_LINES","MULTI_POLYGONS","censusresolution","censusfeature","setCensusresolution","setCensusfeature","getCensusresolution","getCensusfeature","data","responsegeojson","setData","setResponsegeojson","getData","getResponsegeojson","entry","setEntry","getEntry","resolution","predicate","getPredicate","setResolution","setPredicate","getResolution","writeMessage","getWrapperField","setWrapperField","clearPredicate","hasPredicate","getField","spatialresponse","getSpatialresponse","setSpatialresponse","clearSpatialresponse","hasSpatialresponse","decade","comparisonop","comparisonvalue","getFloatingPointFieldWithDefault","setDecade","setComparisonop","readDouble","setComparisonvalue","getDecade","getComparisonop","getComparisonvalue","writeDouble","ComparisonOperator","EQUAL","GREATER_THAN","LESS_THAN","GREATER_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","setProto3FloatField","SpatialOp","GEOWITHIN","GEOINTERSECTS","CensusFeature","TOTALPOPULATION","MEDIANHOUSEHOLDINCOME","POPULATIONBYAGE","MEDIANAGE","POVERTY","RACE","IntraDatasetOp","INTERSECTION","UNION","OVERLAP","CensusResolution","STATE","COUNTY","TRACT","Decade","_2010","_2000","_1990","_1980","object","extend","grpc","web","hostname","credentials","options","client_","GrpcWebClientBase","hostname_","CensusPromiseClient","methodDescriptor_Census_SpatialQuery","MethodDescriptor","MethodType","SERVER_STREAMING","request","AbstractClientBase","MethodInfo","spatialQuery","metadata","serverStreaming","methodDescriptor_Census_OsmQuery","osmQuery","methodDescriptor_Census_DatasetQuery","datasetQuery","methodDescriptor_Census_ExecuteTargetedCensusQuery","executeTargetedCensusQuery","MainNavbar","Navbar","bg","variant","Brand","href","datasets","census_features","census_resolution","census_decades","CensusFeatureSelector","props","state","censusProperties","censusFeature","censusDecade","censusResolution","handleSelectCensusFeature","bind","handleSetCensusDecade","handleSetCensusResolution","updateQueryConstructor","updateProperties","e","target","setState","Form","Group","Row","Col","className","Label","Control","as","onChange","map","item","key","id","React","Component","Query","console","log","Card","style","width","Body","Text","name","Button","onClick","onClickRemove","QueryConstructor","selectedDataset","queries","datasetProperties","handleSelectDataset","addQuery","removeQuery","rawValue","find","x","alert","addActiveDataset","newKey","Math","random","newQueryElement","details","newQuery","push","updatedQueries","filter","element","removeActiveDataset","featureSelectorElement","queriesElement","Jumbotron","PowerStationsMap","activePowerStation","powerStationIcon","Icon","iconUrl","iconSize","powerStationsData","geoJson","datasetRequest","call","on","parse","error","nextProps","nextContext","updateData","TileLayer","url","attribution","powerStation","Marker","PGM_SYS_ID","position","icon","Popup","onClose","PRIMARY_NA","ENERGY_SRC","CITY_NAME","STATE_CODE","NaturalGasPipelinesMap","pipelineData","GeoJSON","color","HospitalsMap","activeHospital","hospitalIcon","hospitalData","hospital","ID","NAME","ADDRESS","CITY","DamsMap","damsData","TransmissionLinesMap","transmissionLinesData","MainMap","toggleDataset","activeDatasets","indexOf","mapRef","createRef","enableHospitals","enableNaturalGasPipelines","enablePowerPlants","enableDams","enableTransmissionLines","center","zoom","onZoomEnd","bounds","current","leafletElement","getBounds","_southWest","_northEast","onMoveEnd","whenReady","ref","Main","index","splice","Container","fluid","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13f9eef1.chunk.js","sourcesContent":["const {CensusClient} = require('./census_grpc_web_pb');\n\nlet client = new CensusClient('http://localhost:8080');\n\nfunction makeGeoJson(southwest, northeast) {\n    const geo = {type: \"Feature\", properties: {}};\n    const geometry = {\n        type: \"polygon\", coordinates: [[\n            [southwest.lng, southwest.lat],\n            [southwest.lng, northeast.lat],\n            [northeast.lng, northeast.lat],\n            [northeast.lng, southwest.lat],\n            [southwest.lng, southwest.lat]]]\n    };\n    geo.geometry = geometry;\n    return JSON.stringify(geo);\n}\n\nlet requestGeoJson = `{\n        \"type\": \"Feature\",\n        \"properties\": {},\n        \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [\n                        -74.23118591308594,\n                        40.56389453066509\n                    ],\n                    [\n                        -73.75259399414062,\n                        40.56389453066509\n                    ],\n                    [\n                        -73.75259399414062,\n                        40.80965166748853\n                    ],\n                    [\n                        -74.23118591308594,\n                        40.80965166748853\n                    ],\n                    [\n                        -74.23118591308594,\n                        40.56389453066509\n                    ]\n                ]\n            ]\n        }\n    }`;\n\nmodule.exports = {\n    client: client,\n    makeGeoJson: makeGeoJson,\n    requestGeoJson: requestGeoJson\n}","// source: census.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = (typeof self == \"undefined\" ? typeof global == \"undefined\"? this : global : self);\n\ngoog.exportSymbol('proto.census.CensusFeature', null, global);\ngoog.exportSymbol('proto.census.CensusResolution', null, global);\ngoog.exportSymbol('proto.census.DatasetEntry', null, global);\ngoog.exportSymbol('proto.census.DatasetRequest', null, global);\ngoog.exportSymbol('proto.census.DatasetRequest.Dataset', null, global);\ngoog.exportSymbol('proto.census.DatasetResponse', null, global);\ngoog.exportSymbol('proto.census.Decade', null, global);\ngoog.exportSymbol('proto.census.IntraDatasetOp', null, global);\ngoog.exportSymbol('proto.census.OsmRequest', null, global);\ngoog.exportSymbol('proto.census.OsmRequest.Dataset', null, global);\ngoog.exportSymbol('proto.census.OsmResponse', null, global);\ngoog.exportSymbol('proto.census.Predicate', null, global);\ngoog.exportSymbol('proto.census.Predicate.ComparisonOperator', null, global);\ngoog.exportSymbol('proto.census.SpatialOp', null, global);\ngoog.exportSymbol('proto.census.SpatialRequest', null, global);\ngoog.exportSymbol('proto.census.SpatialResponse', null, global);\ngoog.exportSymbol('proto.census.TargetedCensusRequest', null, global);\ngoog.exportSymbol('proto.census.TargetedCensusResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.DatasetRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.DatasetRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.DatasetRequest.displayName = 'proto.census.DatasetRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.DatasetResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.DatasetResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.DatasetResponse.displayName = 'proto.census.DatasetResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.OsmRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.OsmRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.OsmRequest.displayName = 'proto.census.OsmRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.OsmResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.OsmResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.OsmResponse.displayName = 'proto.census.OsmResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.SpatialRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.SpatialRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.SpatialRequest.displayName = 'proto.census.SpatialRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.SpatialResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.SpatialResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.SpatialResponse.displayName = 'proto.census.SpatialResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.DatasetEntry = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.DatasetEntry, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.DatasetEntry.displayName = 'proto.census.DatasetEntry';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.TargetedCensusRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.TargetedCensusRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.TargetedCensusRequest.displayName = 'proto.census.TargetedCensusRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.TargetedCensusResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.TargetedCensusResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.TargetedCensusResponse.displayName = 'proto.census.TargetedCensusResponse';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.census.Predicate = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.census.Predicate, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.census.Predicate.displayName = 'proto.census.Predicate';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.DatasetRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.DatasetRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.DatasetRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.DatasetRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    dataset: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    requestgeojson: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    requestparamsMap: (f = msg.getRequestparamsMap()) ? f.toObject(includeInstance, undefined) : []\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.DatasetRequest}\n */\nproto.census.DatasetRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.DatasetRequest;\n  return proto.census.DatasetRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.DatasetRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.DatasetRequest}\n */\nproto.census.DatasetRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.census.DatasetRequest.Dataset} */ (reader.readEnum());\n      msg.setDataset(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRequestgeojson(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.census.SpatialOp} */ (reader.readEnum());\n      msg.setSpatialop(value);\n      break;\n    case 4:\n      var value = msg.getRequestparamsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, \"\", \"\");\n         });\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.DatasetRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.DatasetRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.DatasetRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.DatasetRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDataset();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getRequestgeojson();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getSpatialop();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getRequestparamsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.census.DatasetRequest.Dataset = {\n  HOSPITALS: 0,\n  DAMS: 1,\n  ELECTRICAL_SUBSTATIONS: 2,\n  TRANSMISSION_LINES: 3,\n  NATURAL_GAS_PIPELINES: 4,\n  POWER_PLANTS: 5\n};\n\n/**\n * optional Dataset dataset = 1;\n * @return {!proto.census.DatasetRequest.Dataset}\n */\nproto.census.DatasetRequest.prototype.getDataset = function() {\n  return /** @type {!proto.census.DatasetRequest.Dataset} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.census.DatasetRequest.Dataset} value\n * @return {!proto.census.DatasetRequest} returns this\n */\nproto.census.DatasetRequest.prototype.setDataset = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string requestGeoJson = 2;\n * @return {string}\n */\nproto.census.DatasetRequest.prototype.getRequestgeojson = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.DatasetRequest} returns this\n */\nproto.census.DatasetRequest.prototype.setRequestgeojson = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional SpatialOp spatialOp = 3;\n * @return {!proto.census.SpatialOp}\n */\nproto.census.DatasetRequest.prototype.getSpatialop = function() {\n  return /** @type {!proto.census.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.census.SpatialOp} value\n * @return {!proto.census.DatasetRequest} returns this\n */\nproto.census.DatasetRequest.prototype.setSpatialop = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * map<string, string> requestParams = 4;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,string>}\n */\nproto.census.DatasetRequest.prototype.getRequestparamsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,string>} */ (\n      jspb.Message.getMapField(this, 4, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!proto.census.DatasetRequest} returns this\n */\nproto.census.DatasetRequest.prototype.clearRequestparamsMap = function() {\n  this.getRequestparamsMap().clear();\n  return this;};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.DatasetResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.DatasetResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.DatasetResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.DatasetResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    response: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.DatasetResponse}\n */\nproto.census.DatasetResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.DatasetResponse;\n  return proto.census.DatasetResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.DatasetResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.DatasetResponse}\n */\nproto.census.DatasetResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setResponse(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.DatasetResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.DatasetResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.DatasetResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.DatasetResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getResponse();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string response = 1;\n * @return {string}\n */\nproto.census.DatasetResponse.prototype.getResponse = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.DatasetResponse} returns this\n */\nproto.census.DatasetResponse.prototype.setResponse = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.OsmRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.OsmRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.OsmRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.OsmRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    dataset: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    requestgeojson: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    requestparamsMap: (f = msg.getRequestparamsMap()) ? f.toObject(includeInstance, undefined) : []\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.OsmRequest}\n */\nproto.census.OsmRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.OsmRequest;\n  return proto.census.OsmRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.OsmRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.OsmRequest}\n */\nproto.census.OsmRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.census.OsmRequest.Dataset} */ (reader.readEnum());\n      msg.setDataset(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRequestgeojson(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.census.SpatialOp} */ (reader.readEnum());\n      msg.setSpatialop(value);\n      break;\n    case 4:\n      var value = msg.getRequestparamsMap();\n      reader.readMessage(value, function(message, reader) {\n        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, \"\", \"\");\n         });\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.OsmRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.OsmRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.OsmRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.OsmRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDataset();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getRequestgeojson();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getSpatialop();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getRequestparamsMap(true);\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.census.OsmRequest.Dataset = {\n  POINTS: 0,\n  LINES: 1,\n  MULTI_LINES: 2,\n  MULTI_POLYGONS: 3\n};\n\n/**\n * optional Dataset dataset = 1;\n * @return {!proto.census.OsmRequest.Dataset}\n */\nproto.census.OsmRequest.prototype.getDataset = function() {\n  return /** @type {!proto.census.OsmRequest.Dataset} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.census.OsmRequest.Dataset} value\n * @return {!proto.census.OsmRequest} returns this\n */\nproto.census.OsmRequest.prototype.setDataset = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional string requestGeoJson = 2;\n * @return {string}\n */\nproto.census.OsmRequest.prototype.getRequestgeojson = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.OsmRequest} returns this\n */\nproto.census.OsmRequest.prototype.setRequestgeojson = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional SpatialOp spatialOp = 3;\n * @return {!proto.census.SpatialOp}\n */\nproto.census.OsmRequest.prototype.getSpatialop = function() {\n  return /** @type {!proto.census.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.census.SpatialOp} value\n * @return {!proto.census.OsmRequest} returns this\n */\nproto.census.OsmRequest.prototype.setSpatialop = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * map<string, string> requestParams = 4;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<string,string>}\n */\nproto.census.OsmRequest.prototype.getRequestparamsMap = function(opt_noLazyCreate) {\n  return /** @type {!jspb.Map<string,string>} */ (\n      jspb.Message.getMapField(this, 4, opt_noLazyCreate,\n      null));\n};\n\n\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!proto.census.OsmRequest} returns this\n */\nproto.census.OsmRequest.prototype.clearRequestparamsMap = function() {\n  this.getRequestparamsMap().clear();\n  return this;};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.OsmResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.OsmResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.OsmResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.OsmResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    response: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.OsmResponse}\n */\nproto.census.OsmResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.OsmResponse;\n  return proto.census.OsmResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.OsmResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.OsmResponse}\n */\nproto.census.OsmResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setResponse(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.OsmResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.OsmResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.OsmResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.OsmResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getResponse();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string response = 1;\n * @return {string}\n */\nproto.census.OsmResponse.prototype.getResponse = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.OsmResponse} returns this\n */\nproto.census.OsmResponse.prototype.setResponse = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.SpatialRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.SpatialRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.SpatialRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.SpatialRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    censusresolution: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    censusfeature: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    requestgeojson: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    spatialop: jspb.Message.getFieldWithDefault(msg, 4, 0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.SpatialRequest}\n */\nproto.census.SpatialRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.SpatialRequest;\n  return proto.census.SpatialRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.SpatialRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.SpatialRequest}\n */\nproto.census.SpatialRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.census.CensusResolution} */ (reader.readEnum());\n      msg.setCensusresolution(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.census.CensusFeature} */ (reader.readEnum());\n      msg.setCensusfeature(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRequestgeojson(value);\n      break;\n    case 4:\n      var value = /** @type {!proto.census.SpatialOp} */ (reader.readEnum());\n      msg.setSpatialop(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.SpatialRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.SpatialRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.SpatialRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.SpatialRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCensusresolution();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getCensusfeature();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getRequestgeojson();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getSpatialop();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional CensusResolution censusResolution = 1;\n * @return {!proto.census.CensusResolution}\n */\nproto.census.SpatialRequest.prototype.getCensusresolution = function() {\n  return /** @type {!proto.census.CensusResolution} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.census.CensusResolution} value\n * @return {!proto.census.SpatialRequest} returns this\n */\nproto.census.SpatialRequest.prototype.setCensusresolution = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional CensusFeature censusFeature = 2;\n * @return {!proto.census.CensusFeature}\n */\nproto.census.SpatialRequest.prototype.getCensusfeature = function() {\n  return /** @type {!proto.census.CensusFeature} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.census.CensusFeature} value\n * @return {!proto.census.SpatialRequest} returns this\n */\nproto.census.SpatialRequest.prototype.setCensusfeature = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional string requestGeoJson = 3;\n * @return {string}\n */\nproto.census.SpatialRequest.prototype.getRequestgeojson = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.SpatialRequest} returns this\n */\nproto.census.SpatialRequest.prototype.setRequestgeojson = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional SpatialOp spatialOp = 4;\n * @return {!proto.census.SpatialOp}\n */\nproto.census.SpatialRequest.prototype.getSpatialop = function() {\n  return /** @type {!proto.census.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));\n};\n\n\n/**\n * @param {!proto.census.SpatialOp} value\n * @return {!proto.census.SpatialRequest} returns this\n */\nproto.census.SpatialRequest.prototype.setSpatialop = function(value) {\n  return jspb.Message.setProto3EnumField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.SpatialResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.SpatialResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.SpatialResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.SpatialResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    data: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    responsegeojson: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.SpatialResponse}\n */\nproto.census.SpatialResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.SpatialResponse;\n  return proto.census.SpatialResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.SpatialResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.SpatialResponse}\n */\nproto.census.SpatialResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setData(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setResponsegeojson(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.SpatialResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.SpatialResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.SpatialResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.SpatialResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getData();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getResponsegeojson();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string data = 1;\n * @return {string}\n */\nproto.census.SpatialResponse.prototype.getData = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.SpatialResponse} returns this\n */\nproto.census.SpatialResponse.prototype.setData = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string responseGeoJson = 2;\n * @return {string}\n */\nproto.census.SpatialResponse.prototype.getResponsegeojson = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.SpatialResponse} returns this\n */\nproto.census.SpatialResponse.prototype.setResponsegeojson = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.DatasetEntry.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.DatasetEntry.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.DatasetEntry} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.DatasetEntry.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    entry: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.DatasetEntry}\n */\nproto.census.DatasetEntry.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.DatasetEntry;\n  return proto.census.DatasetEntry.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.DatasetEntry} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.DatasetEntry}\n */\nproto.census.DatasetEntry.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setEntry(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.DatasetEntry.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.DatasetEntry.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.DatasetEntry} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.DatasetEntry.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEntry();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string entry = 1;\n * @return {string}\n */\nproto.census.DatasetEntry.prototype.getEntry = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.DatasetEntry} returns this\n */\nproto.census.DatasetEntry.prototype.setEntry = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.TargetedCensusRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.TargetedCensusRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.TargetedCensusRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.TargetedCensusRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    resolution: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    predicate: (f = msg.getPredicate()) && proto.census.Predicate.toObject(includeInstance, f),\n    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    requestgeojson: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.TargetedCensusRequest}\n */\nproto.census.TargetedCensusRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.TargetedCensusRequest;\n  return proto.census.TargetedCensusRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.TargetedCensusRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.TargetedCensusRequest}\n */\nproto.census.TargetedCensusRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.census.CensusResolution} */ (reader.readEnum());\n      msg.setResolution(value);\n      break;\n    case 2:\n      var value = new proto.census.Predicate;\n      reader.readMessage(value,proto.census.Predicate.deserializeBinaryFromReader);\n      msg.setPredicate(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.census.SpatialOp} */ (reader.readEnum());\n      msg.setSpatialop(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRequestgeojson(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.TargetedCensusRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.TargetedCensusRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.TargetedCensusRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.TargetedCensusRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getResolution();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getPredicate();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.census.Predicate.serializeBinaryToWriter\n    );\n  }\n  f = message.getSpatialop();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getRequestgeojson();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional CensusResolution resolution = 1;\n * @return {!proto.census.CensusResolution}\n */\nproto.census.TargetedCensusRequest.prototype.getResolution = function() {\n  return /** @type {!proto.census.CensusResolution} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.census.CensusResolution} value\n * @return {!proto.census.TargetedCensusRequest} returns this\n */\nproto.census.TargetedCensusRequest.prototype.setResolution = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional Predicate predicate = 2;\n * @return {?proto.census.Predicate}\n */\nproto.census.TargetedCensusRequest.prototype.getPredicate = function() {\n  return /** @type{?proto.census.Predicate} */ (\n    jspb.Message.getWrapperField(this, proto.census.Predicate, 2));\n};\n\n\n/**\n * @param {?proto.census.Predicate|undefined} value\n * @return {!proto.census.TargetedCensusRequest} returns this\n*/\nproto.census.TargetedCensusRequest.prototype.setPredicate = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.census.TargetedCensusRequest} returns this\n */\nproto.census.TargetedCensusRequest.prototype.clearPredicate = function() {\n  return this.setPredicate(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.census.TargetedCensusRequest.prototype.hasPredicate = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n/**\n * optional SpatialOp spatialOp = 3;\n * @return {!proto.census.SpatialOp}\n */\nproto.census.TargetedCensusRequest.prototype.getSpatialop = function() {\n  return /** @type {!proto.census.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.census.SpatialOp} value\n * @return {!proto.census.TargetedCensusRequest} returns this\n */\nproto.census.TargetedCensusRequest.prototype.setSpatialop = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * optional string requestGeoJson = 4;\n * @return {string}\n */\nproto.census.TargetedCensusRequest.prototype.getRequestgeojson = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.census.TargetedCensusRequest} returns this\n */\nproto.census.TargetedCensusRequest.prototype.setRequestgeojson = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.TargetedCensusResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.TargetedCensusResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.TargetedCensusResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.TargetedCensusResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    spatialresponse: (f = msg.getSpatialresponse()) && proto.census.SpatialResponse.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.TargetedCensusResponse}\n */\nproto.census.TargetedCensusResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.TargetedCensusResponse;\n  return proto.census.TargetedCensusResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.TargetedCensusResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.TargetedCensusResponse}\n */\nproto.census.TargetedCensusResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.census.SpatialResponse;\n      reader.readMessage(value,proto.census.SpatialResponse.deserializeBinaryFromReader);\n      msg.setSpatialresponse(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.TargetedCensusResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.TargetedCensusResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.TargetedCensusResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.TargetedCensusResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSpatialresponse();\n  if (f != null) {\n    writer.writeMessage(\n      1,\n      f,\n      proto.census.SpatialResponse.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional SpatialResponse spatialResponse = 1;\n * @return {?proto.census.SpatialResponse}\n */\nproto.census.TargetedCensusResponse.prototype.getSpatialresponse = function() {\n  return /** @type{?proto.census.SpatialResponse} */ (\n    jspb.Message.getWrapperField(this, proto.census.SpatialResponse, 1));\n};\n\n\n/**\n * @param {?proto.census.SpatialResponse|undefined} value\n * @return {!proto.census.TargetedCensusResponse} returns this\n*/\nproto.census.TargetedCensusResponse.prototype.setSpatialresponse = function(value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.census.TargetedCensusResponse} returns this\n */\nproto.census.TargetedCensusResponse.prototype.clearSpatialresponse = function() {\n  return this.setSpatialresponse(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.census.TargetedCensusResponse.prototype.hasSpatialresponse = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.census.Predicate.prototype.toObject = function(opt_includeInstance) {\n  return proto.census.Predicate.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.census.Predicate} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.Predicate.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    censusfeature: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    decade: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    comparisonop: jspb.Message.getFieldWithDefault(msg, 3, 0),\n    comparisonvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.census.Predicate}\n */\nproto.census.Predicate.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.census.Predicate;\n  return proto.census.Predicate.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.census.Predicate} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.census.Predicate}\n */\nproto.census.Predicate.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!proto.census.CensusFeature} */ (reader.readEnum());\n      msg.setCensusfeature(value);\n      break;\n    case 2:\n      var value = /** @type {!proto.census.Decade} */ (reader.readEnum());\n      msg.setDecade(value);\n      break;\n    case 3:\n      var value = /** @type {!proto.census.Predicate.ComparisonOperator} */ (reader.readEnum());\n      msg.setComparisonop(value);\n      break;\n    case 4:\n      var value = /** @type {number} */ (reader.readDouble());\n      msg.setComparisonvalue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.census.Predicate.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.census.Predicate.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.census.Predicate} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.census.Predicate.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCensusfeature();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      1,\n      f\n    );\n  }\n  f = message.getDecade();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      2,\n      f\n    );\n  }\n  f = message.getComparisonop();\n  if (f !== 0.0) {\n    writer.writeEnum(\n      3,\n      f\n    );\n  }\n  f = message.getComparisonvalue();\n  if (f !== 0.0) {\n    writer.writeDouble(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * @enum {number}\n */\nproto.census.Predicate.ComparisonOperator = {\n  EQUAL: 0,\n  GREATER_THAN: 1,\n  LESS_THAN: 2,\n  GREATER_THAN_OR_EQUAL: 3,\n  LESS_THAN_OR_EQUAL: 4\n};\n\n/**\n * optional CensusFeature censusFeature = 1;\n * @return {!proto.census.CensusFeature}\n */\nproto.census.Predicate.prototype.getCensusfeature = function() {\n  return /** @type {!proto.census.CensusFeature} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {!proto.census.CensusFeature} value\n * @return {!proto.census.Predicate} returns this\n */\nproto.census.Predicate.prototype.setCensusfeature = function(value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n\n\n/**\n * optional Decade decade = 2;\n * @return {!proto.census.Decade}\n */\nproto.census.Predicate.prototype.getDecade = function() {\n  return /** @type {!proto.census.Decade} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {!proto.census.Decade} value\n * @return {!proto.census.Predicate} returns this\n */\nproto.census.Predicate.prototype.setDecade = function(value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n\n\n/**\n * optional ComparisonOperator comparisonOp = 3;\n * @return {!proto.census.Predicate.ComparisonOperator}\n */\nproto.census.Predicate.prototype.getComparisonop = function() {\n  return /** @type {!proto.census.Predicate.ComparisonOperator} */ (jspb.Message.getFieldWithDefault(this, 3, 0));\n};\n\n\n/**\n * @param {!proto.census.Predicate.ComparisonOperator} value\n * @return {!proto.census.Predicate} returns this\n */\nproto.census.Predicate.prototype.setComparisonop = function(value) {\n  return jspb.Message.setProto3EnumField(this, 3, value);\n};\n\n\n/**\n * optional double comparisonValue = 4;\n * @return {number}\n */\nproto.census.Predicate.prototype.getComparisonvalue = function() {\n  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.census.Predicate} returns this\n */\nproto.census.Predicate.prototype.setComparisonvalue = function(value) {\n  return jspb.Message.setProto3FloatField(this, 4, value);\n};\n\n\n/**\n * @enum {number}\n */\nproto.census.SpatialOp = {\n  GEOWITHIN: 0,\n  GEOINTERSECTS: 1\n};\n\n/**\n * @enum {number}\n */\nproto.census.CensusFeature = {\n  TOTALPOPULATION: 0,\n  MEDIANHOUSEHOLDINCOME: 1,\n  POPULATIONBYAGE: 2,\n  MEDIANAGE: 3,\n  POVERTY: 4,\n  RACE: 5\n};\n\n/**\n * @enum {number}\n */\nproto.census.IntraDatasetOp = {\n  INTERSECTION: 0,\n  UNION: 1,\n  OVERLAP: 2\n};\n\n/**\n * @enum {number}\n */\nproto.census.CensusResolution = {\n  STATE: 0,\n  COUNTY: 1,\n  TRACT: 2\n};\n\n/**\n * @enum {number}\n */\nproto.census.Decade = {\n  _2010: 0,\n  _2000: 1,\n  _1990: 2,\n  _1980: 3\n};\n\ngoog.object.extend(exports, proto.census);\n","/**\n * @fileoverview gRPC-Web generated client stub for census\n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n\n\n/* eslint-disable */\n// @ts-nocheck\n\n\n\nconst grpc = {};\ngrpc.web = require('grpc-web');\n\nconst proto = {};\nproto.census = require('./census_pb.js');\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.census.CensusClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.census.CensusPromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'text';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.census.SpatialRequest,\n *   !proto.census.SpatialResponse>}\n */\nconst methodDescriptor_Census_SpatialQuery = new grpc.web.MethodDescriptor(\n  '/census.Census/SpatialQuery',\n  grpc.web.MethodType.SERVER_STREAMING,\n  proto.census.SpatialRequest,\n  proto.census.SpatialResponse,\n  /**\n   * @param {!proto.census.SpatialRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.census.SpatialResponse.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.census.SpatialRequest,\n *   !proto.census.SpatialResponse>}\n */\nconst methodInfo_Census_SpatialQuery = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.census.SpatialResponse,\n  /**\n   * @param {!proto.census.SpatialRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.census.SpatialResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.census.SpatialRequest} request The request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.census.SpatialResponse>}\n *     The XHR Node Readable Stream\n */\nproto.census.CensusClient.prototype.spatialQuery =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/census.Census/SpatialQuery',\n      request,\n      metadata || {},\n      methodDescriptor_Census_SpatialQuery);\n};\n\n\n/**\n * @param {!proto.census.SpatialRequest} request The request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.census.SpatialResponse>}\n *     The XHR Node Readable Stream\n */\nproto.census.CensusPromiseClient.prototype.spatialQuery =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/census.Census/SpatialQuery',\n      request,\n      metadata || {},\n      methodDescriptor_Census_SpatialQuery);\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.census.OsmRequest,\n *   !proto.census.OsmResponse>}\n */\nconst methodDescriptor_Census_OsmQuery = new grpc.web.MethodDescriptor(\n  '/census.Census/OsmQuery',\n  grpc.web.MethodType.SERVER_STREAMING,\n  proto.census.OsmRequest,\n  proto.census.OsmResponse,\n  /**\n   * @param {!proto.census.OsmRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.census.OsmResponse.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.census.OsmRequest,\n *   !proto.census.OsmResponse>}\n */\nconst methodInfo_Census_OsmQuery = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.census.OsmResponse,\n  /**\n   * @param {!proto.census.OsmRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.census.OsmResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.census.OsmRequest} request The request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.census.OsmResponse>}\n *     The XHR Node Readable Stream\n */\nproto.census.CensusClient.prototype.osmQuery =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/census.Census/OsmQuery',\n      request,\n      metadata || {},\n      methodDescriptor_Census_OsmQuery);\n};\n\n\n/**\n * @param {!proto.census.OsmRequest} request The request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.census.OsmResponse>}\n *     The XHR Node Readable Stream\n */\nproto.census.CensusPromiseClient.prototype.osmQuery =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/census.Census/OsmQuery',\n      request,\n      metadata || {},\n      methodDescriptor_Census_OsmQuery);\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.census.DatasetRequest,\n *   !proto.census.DatasetResponse>}\n */\nconst methodDescriptor_Census_DatasetQuery = new grpc.web.MethodDescriptor(\n  '/census.Census/DatasetQuery',\n  grpc.web.MethodType.SERVER_STREAMING,\n  proto.census.DatasetRequest,\n  proto.census.DatasetResponse,\n  /**\n   * @param {!proto.census.DatasetRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.census.DatasetResponse.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.census.DatasetRequest,\n *   !proto.census.DatasetResponse>}\n */\nconst methodInfo_Census_DatasetQuery = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.census.DatasetResponse,\n  /**\n   * @param {!proto.census.DatasetRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.census.DatasetResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.census.DatasetRequest} request The request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.census.DatasetResponse>}\n *     The XHR Node Readable Stream\n */\nproto.census.CensusClient.prototype.datasetQuery =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/census.Census/DatasetQuery',\n      request,\n      metadata || {},\n      methodDescriptor_Census_DatasetQuery);\n};\n\n\n/**\n * @param {!proto.census.DatasetRequest} request The request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.census.DatasetResponse>}\n *     The XHR Node Readable Stream\n */\nproto.census.CensusPromiseClient.prototype.datasetQuery =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/census.Census/DatasetQuery',\n      request,\n      metadata || {},\n      methodDescriptor_Census_DatasetQuery);\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.census.TargetedCensusRequest,\n *   !proto.census.TargetedCensusResponse>}\n */\nconst methodDescriptor_Census_ExecuteTargetedCensusQuery = new grpc.web.MethodDescriptor(\n  '/census.Census/ExecuteTargetedCensusQuery',\n  grpc.web.MethodType.SERVER_STREAMING,\n  proto.census.TargetedCensusRequest,\n  proto.census.TargetedCensusResponse,\n  /**\n   * @param {!proto.census.TargetedCensusRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.census.TargetedCensusResponse.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.census.TargetedCensusRequest,\n *   !proto.census.TargetedCensusResponse>}\n */\nconst methodInfo_Census_ExecuteTargetedCensusQuery = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.census.TargetedCensusResponse,\n  /**\n   * @param {!proto.census.TargetedCensusRequest} request\n   * @return {!Uint8Array}\n   */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.census.TargetedCensusResponse.deserializeBinary\n);\n\n\n/**\n * @param {!proto.census.TargetedCensusRequest} request The request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.census.TargetedCensusResponse>}\n *     The XHR Node Readable Stream\n */\nproto.census.CensusClient.prototype.executeTargetedCensusQuery =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/census.Census/ExecuteTargetedCensusQuery',\n      request,\n      metadata || {},\n      methodDescriptor_Census_ExecuteTargetedCensusQuery);\n};\n\n\n/**\n * @param {!proto.census.TargetedCensusRequest} request The request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!grpc.web.ClientReadableStream<!proto.census.TargetedCensusResponse>}\n *     The XHR Node Readable Stream\n */\nproto.census.CensusPromiseClient.prototype.executeTargetedCensusQuery =\n    function(request, metadata) {\n  return this.client_.serverStreaming(this.hostname_ +\n      '/census.Census/ExecuteTargetedCensusQuery',\n      request,\n      metadata || {},\n      methodDescriptor_Census_ExecuteTargetedCensusQuery);\n};\n\n\nmodule.exports = proto.census;\n\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nexport const MainNavbar = () => {\n    return <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"\">SUSTAIN Dataset Explorer</Navbar.Brand>\n        {/*<Nav className=\"mr-auto\">*/}\n        {/*    <Nav.Link href=\"#home\">Home</Nav.Link>*/}\n        {/*    <Nav.Link href=\"#features\">Features</Nav.Link>*/}\n        {/*    <Nav.Link href=\"#pricing\">Pricing</Nav.Link>*/}\n        {/*</Nav>*/}\n        {/*<Form inline>*/}\n        {/*    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>*/}\n        {/*    <Button variant=\"outline-info\">Search</Button>*/}\n        {/*</Form>*/}\n    </Navbar>\n}","export const datasets = [\n    {'id': 'census', 'value': \"Census\"},\n    {'id': 'hospitals', 'value': \"Hospitals\"},\n    {'id': 'electrical_substations', 'value': \"Electrical Substations\"},\n    {'id': 'dams', 'value': \"Dams\"},\n    {'id': 'transmission_lines', 'value': \"Transmission Lines\"},\n    {'id': 'natural_gas_pipelines', 'value': \"Natural Gas Pipelines\"},\n    {'id': 'flood_zones', 'value': \"Flood Zones\"},\n    {'id': 'power_plants', 'value': \"Power Plants\"},\n    {'id': 'osm', 'value': \"Open Street Maps\"}\n];\n\nexport const census_features = [\n    {'id': 'total_population', 'value': 'Total Population'},\n    {'id': 'median_household_income', 'value': 'Avg. Household Income'},\n    {'id': 'race', 'value': 'Demographics'},\n    {'id': 'median_age', 'value': 'Median Age'},\n    {'id': 'poverty', 'value': 'Percentage of population below poverty'},\n];\n\nexport const census_resolution = [\n    {'id': 'county', 'value': 'County'},\n    {'id': 'tract', 'value': 'Tract'},\n    {'id': 'block', 'value': 'Block'}\n];\n\nexport const census_decades = [\n    {'id': '2010', 'value': 2010},\n    {'id': '2000', 'value': 2000},\n    {'id': '1990', 'value': 1990},\n    {'id': '1980', 'value': 1980}\n];\n","import React from \"react\";\nimport {Form, Row, Col} from \"react-bootstrap\";\nimport {census_decades, census_features, census_resolution} from \"./datasets\";\n\nexport class CensusFeatureSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            censusProperties: {\n                censusFeature: 'Total Population',\n                censusDecade: '2010',\n                censusResolution: 'County'\n            }\n        };\n        this.handleSelectCensusFeature = this.handleSelectCensusFeature.bind(this);\n        this.handleSetCensusDecade = this.handleSetCensusDecade.bind(this);\n        this.handleSetCensusResolution = this.handleSetCensusResolution.bind(this);\n        this.updateQueryConstructor();\n    }\n\n    updateQueryConstructor() {\n        this.props.updateProperties('Census', this.state.censusProperties);\n    }\n\n    handleSelectCensusFeature(e) {\n        let censusProperties = {...this.state.censusProperties};\n        censusProperties.censusFeature = e.target.value;\n        this.setState({\n            censusProperties: censusProperties\n        });\n\n        this.updateQueryConstructor();\n    }\n\n    handleSetCensusDecade(e) {\n        let censusProperties = {...this.state.censusProperties};\n        censusProperties.censusDecade = e.target.value;\n        this.setState({\n            censusProperties: censusProperties\n        });\n\n        this.updateQueryConstructor();\n    }\n\n    handleSetCensusResolution(e) {\n        let censusProperties = {...this.state.censusProperties};\n        censusProperties.censusResolution = e.target.value;\n        this.setState({\n            censusProperties: censusProperties\n        });\n\n        this.updateQueryConstructor();\n    }\n\n    render() {\n        return (\n            <Form.Group>\n                <Row>\n                    <Col className=\"col-6\">\n                        <Form.Label>Feature</Form.Label>\n                        <Form.Control as=\"select\"\n                                      onChange={this.handleSelectCensusFeature}\n                                      value={this.state.censusProperties[\"censusFeature\"]}\n                        >\n                            {census_features.map(item => {\n                                return <option key={item.id}>{item.value}</option>\n                            })}\n                        </Form.Control>\n                    </Col>\n                    <Col className=\"col-3\">\n                        <Form.Label>Decade</Form.Label>\n                        <Form.Control as=\"select\"\n                                      onChange={(e) => this.handleSetCensusDecade(e)}\n                                      value={this.state.censusProperties[\"censusDecade\"]}\n                        >\n                            {census_decades.map(item => {\n                                return <option key={item.id}>{item.value}</option>\n                            })}\n                        </Form.Control>\n                    </Col>\n                    <Col className=\"col-3\">\n                        <Form.Label>Resolution</Form.Label>\n                        <Form.Control as=\"select\"\n                                      onChange={this.handleSetCensusResolution}\n                                      value={this.state.censusProperties[\"censusResolution\"]}\n                        >\n                            {census_resolution.map(item => {\n                                return <option key={item.id}>{item.value}</option>\n                            })}\n                        </Form.Control>\n                    </Col>\n                </Row>\n            </Form.Group>\n        );\n    }\n}","import React from \"react\";\nimport {Button, Card} from \"react-bootstrap\";\n\nexport class Query extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        console.log('query.js - props:', this.props);\n        return (\n            <div>\n                <Card style={{width: '16rem'}}>\n                    <Card.Body>\n                        {/*<Card.Title>{this.props.name}</Card.Title>*/}\n                        <Card.Text>\n                            {this.props.name} &nbsp;\n                            {/*{this.props.details}*/}\n                            <Button className=\"btn btn-sm btn-danger\"\n                                    onClick={() => this.props.onClickRemove(this.props.id)}\n                            >X</Button>\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport {datasets} from './datasets';\nimport {Jumbotron, Form, Row, Col, Button} from \"react-bootstrap\";\nimport {CensusFeatureSelector} from \"./census-feature-selector\";\nimport {Query} from \"./query\";\n\nexport class QueryConstructor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedDataset: 'Census',\n            queries: [],\n            censusProperties: {\n                censusFeature: '',\n                censusDecade: '',\n                censusResolution: ''\n            },\n            datasetProperties: ''\n        };\n        this.handleSelectDataset = this.handleSelectDataset.bind(this);\n        this.updateProperties = this.updateProperties.bind(this);\n        this.addQuery = this.addQuery.bind(this);\n        this.removeQuery = this.removeQuery.bind(this);\n    }\n\n    handleSelectDataset(e) {\n        const rawValue = e.target.value;\n        let selectedDataset = datasets.find(x => x.value === rawValue);\n        this.setState({\n            selectedDataset\n        });\n    }\n\n    addQuery() {\n        if (this.state.selectedDataset.id === 'census') {\n            if (this.state.censusProperties.censusDecade === '' ||\n                this.state.censusProperties.censusFeature === '' ||\n                this.state.censusProperties.censusResolution === '') {\n                alert('Census Properties not set. Cannot construct query');\n            } else {\n                this.setState({\n                    datasetProperties: this.state.censusProperties\n                });\n\n            }\n        } else {\n            // TODO: support adding properties for datasets other than Census\n            this.setState({\n                datasetProperties: ''\n            });\n        }\n\n        this.props.addActiveDataset(this.state.selectedDataset.id);\n\n        const queries = [...this.state.queries];    // get all existing queries\n        const newKey = Math.random();   // key for the new query\n        let newQueryElement = <Query name={this.state.selectedDataset.value}\n                                     key={this.state.selectedDataset.id}   // not a prop, but required for rendering the element\n                                     id={this.state.selectedDataset.id}    // prop\n                                     details={JSON.stringify(this.state.datasetProperties)}\n                                     onClickRemove={this.removeQuery}\n        />\n        let newQuery = {\n            'id': newKey,\n            'name': this.state.selectedDataset,\n            'element': newQueryElement\n        };\n        queries.push(newQuery);\n        this.setState({\n            queries: queries\n        });\n    }\n\n    removeQuery(id) {\n        console.log('removeQuery:', id);\n        const queries = [...this.state.queries];\n        console.log('queries:', queries);\n        const updatedQueries = queries.filter(x => x.element.key !== id);\n        this.setState({\n            queries: updatedQueries\n        });\n        this.props.removeActiveDataset(id);\n    }\n\n    updateProperties(dataset, properties) {\n        if (dataset === 'Census') {\n            console.log(true);\n            this.setState({\n                censusProperties: properties,\n            });\n        }\n        console.log(properties);\n        console.log(this.state.censusProperties);\n    }\n\n    render() {\n        let featureSelectorElement;\n        if (this.state.selectedDataset === 'Census') {\n            featureSelectorElement = <CensusFeatureSelector\n                updateProperties={this.updateProperties}\n            />;\n        } else {\n            featureSelectorElement = '';\n        }\n\n        let queriesElement;\n        if (this.state.queries === []) {\n            queriesElement = '';\n        } else {\n            queriesElement = this.state.queries.map(item => {\n                return item.element;\n            });\n        }\n\n        return (\n            <div>\n                <Jumbotron>\n                    <Row>\n                        <Col>\n                            <h3>Construct Query</h3>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Label>Select Dataset</Form.Label>\n                                    <Form.Control as=\"select\"\n                                                  onChange={this.handleSelectDataset}\n                                                  value={this.state.selectedDataset.value}\n                                    >\n                                        {datasets.map(item => {\n                                            return <option key={item.id}>{item.value}</option>\n                                        })}\n                                    </Form.Control>\n                                </Form.Group>\n                                {featureSelectorElement}\n                            </Form>\n                            <br/>\n                            <Button onClick={this.addQuery}>Add</Button>\n                        </Col>\n                    </Row>\n                    <br/>\n                    <hr/>\n                    <Row>\n                        <Col className=\"col-3\">\n                            <h3>Query Pipeline</h3>\n                            {queriesElement}\n                        </Col>\n                    </Row>\n                </Jumbotron>\n            </div>\n        );\n    }\n}\n\n","import React from \"react\";\nimport '../../App.css';\nimport {Icon} from \"leaflet\";\nimport {TileLayer, Marker, Popup} from \"react-leaflet\";\n\nconst {client} = require('../grpc-client/grpc-querier');\nconst {DatasetRequest} = require('../grpc-client/census_pb');\n\nexport class PowerStationsMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activePowerStation: null,\n            powerStationIcon: new Icon({\n                iconUrl: 'power-plan-icon.png',\n                iconSize: [25, 25]\n            }),\n            powerStationsData: []\n        }\n    }\n\n    updateData() {\n        const geoJson = this.props.geoJson;\n        if (geoJson) {\n            let powerStationsData = [];\n            const datasetRequest = new DatasetRequest();\n            datasetRequest.setDataset(5);\n            datasetRequest.setSpatialop(0);\n            datasetRequest.setRequestgeojson(this.props.geoJson);\n            let call = client.datasetQuery(datasetRequest);\n            call.on('data', (data) => {\n                const response = JSON.parse(data.getResponse());\n                powerStationsData.push(response);\n            });\n            call.on('error', console.error);\n            call.on('end', () => {\n                console.log('hospitals count:', powerStationsData.length);\n                this.setState({\n                    powerStationsData: powerStationsData\n                });\n            });\n        } else {\n            console.error(\"GeoJson is undefined\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.updateData();\n    }\n\n    render() {\n        let activePowerStation = this.state.activePowerStation;\n        let powerStationsData = this.state.powerStationsData;\n        return (\n            <div>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {powerStationsData && powerStationsData.length > 0 &&\n                powerStationsData.map(powerStation =>\n                    <Marker key={powerStation.properties.PGM_SYS_ID} position={[\n                        powerStation.geometry.coordinates[1],\n                        powerStation.geometry.coordinates[0]\n                    ]}\n                            onClick={() => {\n                                this.setState({\n                                    activePowerStation: powerStation\n                                });\n                            }}\n                            icon={this.state.powerStationIcon}\n                    ></Marker>\n                )}\n\n                {activePowerStation && <Popup\n                    position={[\n                        activePowerStation.geometry.coordinates[1],\n                        activePowerStation.geometry.coordinates[0]\n                    ]}\n                    onClose={() => {\n                        this.setState({\n                            activePowerStation: null\n                        });\n                    }}\n                >\n                    <div>\n                        <h4>{activePowerStation.properties.PRIMARY_NA}</h4>\n                        <h5>Energy Source: {activePowerStation.properties.ENERGY_SRC}</h5>\n                        <h6>Location: {activePowerStation.properties.CITY_NAME}, {activePowerStation.properties.STATE_CODE}</h6>\n                    </div>\n                </Popup>}\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport '../../App.css';\nimport {TileLayer, GeoJSON} from \"react-leaflet\";\n// import * as naturalGasPipelinesData from \"../../resources/data/natural_gas_pipelines.json\";\n\nconst {client} = require('../grpc-client/grpc-querier');\nconst {DatasetRequest} = require('../grpc-client/census_pb');\n\nexport class NaturalGasPipelinesMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pipelineData: [],\n            element: null\n        }\n    }\n\n    updateData() {\n        const geoJson = this.props.geoJson;\n        if (geoJson) {\n            let pipelineData = [];\n            const datasetRequest = new DatasetRequest();\n            datasetRequest.setDataset(4);\n            datasetRequest.setSpatialop(0);\n            datasetRequest.setRequestgeojson(this.props.geoJson);\n            let call = client.datasetQuery(datasetRequest);\n            call.on('data', (data) => {\n                const response = JSON.parse(data.getResponse());\n                pipelineData.push(response);\n            });\n            call.on('error', console.error);\n            call.on('end', () => {\n                console.log('pipelines count:', pipelineData.length);\n                this.setState({\n                    pipelineData: pipelineData,\n                    element: <GeoJSON data={pipelineData} style={{color: 'green'}}/>\n                });\n            });\n        } else {\n            console.error(\"GeoJson is undefined\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        // this is necessary as <GeoJSON/> does not redraw on data change.\n        // entire element needs to be re-rendered\n        this.setState({\n           element: null\n        });\n        this.updateData();\n    }\n\n    render() {\n        let pipelineData = this.state.pipelineData;\n        return (\n            <div>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {pipelineData && pipelineData.length > 0 &&\n                    this.state.element\n                }\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport '../../App.css';\nimport {Icon} from \"leaflet\";\nimport {TileLayer, Marker, Popup} from \"react-leaflet\";\n\nconst {client} = require('../grpc-client/grpc-querier');\nconst {DatasetRequest} = require('../grpc-client/census_pb');\n\nexport class HospitalsMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeHospital: null,\n            hospitalIcon: new Icon({\n                iconUrl: 'healthcare-icon.png',\n                iconSize: [25, 25]\n            }),\n            hospitalData: []\n        }\n        this.updateData = this.updateData.bind(this);\n    }\n\n    updateData() {\n        const geoJson = this.props.geoJson;\n        if (geoJson) {\n            let hospitalData = [];\n            const datasetRequest = new DatasetRequest();\n            datasetRequest.setDataset(0);\n            datasetRequest.setSpatialop(0);\n            datasetRequest.setRequestgeojson(this.props.geoJson);\n            let call = client.datasetQuery(datasetRequest);\n            call.on('data', (data) => {\n                const response = JSON.parse(data.getResponse());\n                hospitalData.push(response);\n            });\n            call.on('error', console.error);\n            call.on('end', () => {\n                console.log('hospitals count:', hospitalData.length);\n                this.setState({\n                    hospitalData: hospitalData\n                });\n            });\n        } else {\n            console.error(\"GeoJson is undefined\");\n        }\n    }\n\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.updateData();\n    }\n\n    render() {\n        let hospitalData = this.state.hospitalData;\n        return (\n            <div>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {hospitalData && hospitalData.length > 0 && hospitalData.map(hospital =>\n                    <Marker key={hospital.properties.ID} position={[\n                        hospital.geometry.coordinates[1],\n                        hospital.geometry.coordinates[0]\n                    ]}\n                            onClick={() => {\n                                this.setState({\n                                    activeHospital: hospital\n                                });\n                            }}\n                            icon={this.state.hospitalIcon}\n                    ></Marker>\n                )}\n\n                {this.state.activeHospital && <Popup\n                    position={[\n                        this.state.activeHospital.geometry.coordinates[1],\n                        this.state.activeHospital.geometry.coordinates[0]\n                    ]}\n                    onClose={() => {\n                        this.setState({\n                            activeHospital: null\n                        });\n                    }}\n                >\n                    <div>\n                        <h4>{this.state.activeHospital.properties.NAME}</h4>\n                        <h6>{this.state.activeHospital.properties.ADDRESS}, {this.state.activeHospital.properties.CITY},\n                            {this.state.activeHospital.properties.STATE}</h6>\n                    </div>\n                </Popup>}\n            </div>\n        );\n    }\n\n}","import React from \"react\";\nimport '../../App.css';\nimport {TileLayer, GeoJSON} from \"react-leaflet\";\n\nconst {client} = require('../grpc-client/grpc-querier');\nconst {DatasetRequest} = require('../grpc-client/census_pb');\n\nexport class DamsMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            damsData: [],\n            element: null\n        }\n    }\n\n    updateData() {\n        const geoJson = this.props.geoJson;\n        if (geoJson) {\n            let damsData = [];\n            const datasetRequest = new DatasetRequest();\n            datasetRequest.setDataset(1);\n            datasetRequest.setSpatialop(0);\n            datasetRequest.setRequestgeojson(this.props.geoJson);\n            let call = client.datasetQuery(datasetRequest);\n            call.on('data', (data) => {\n                const response = JSON.parse(data.getResponse());\n                damsData.push(response);\n            });\n            call.on('error', console.error);\n            call.on('end', () => {\n                console.log('dams count:', damsData.length);\n                this.setState({\n                    damsData: damsData,\n                    element: <GeoJSON data={damsData} style={{color: 'brown'}}/>\n                });\n            });\n        } else {\n            console.error(\"GeoJson is undefined\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        // this is necessary as <GeoJSON/> does not redraw on data change.\n        // entire element needs to be re-rendered\n        this.setState({\n            element: null\n        });\n        this.updateData();\n    }\n\n    render() {\n        let damsData = this.state.damsData;\n        return (\n            <div>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {damsData && damsData.length > 0 &&\n                this.state.element\n                }\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport '../../App.css';\nimport {TileLayer, GeoJSON} from \"react-leaflet\";\n\nconst {client} = require('../grpc-client/grpc-querier');\nconst {DatasetRequest} = require('../grpc-client/census_pb');\n\nexport class TransmissionLinesMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            transmissionLinesData: [],\n            element: null\n        }\n    }\n\n    updateData() {\n        const geoJson = this.props.geoJson;\n        if (geoJson) {\n            let transmissionLinesData = [];\n            const datasetRequest = new DatasetRequest();\n            datasetRequest.setDataset(3);\n            datasetRequest.setSpatialop(0);\n            datasetRequest.setRequestgeojson(this.props.geoJson);\n            let call = client.datasetQuery(datasetRequest);\n            call.on('data', (data) => {\n                const response = JSON.parse(data.getResponse());\n                transmissionLinesData.push(response);\n            });\n            call.on('error', console.error);\n            call.on('end', () => {\n                console.log('transmission lines count:', transmissionLinesData.length);\n                this.setState({\n                    transmissionLinesData: transmissionLinesData,\n                    element: <GeoJSON data={transmissionLinesData} style={{color: 'purple'}}/>\n                });\n            });\n        } else {\n            console.error(\"GeoJson is undefined\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        // this is necessary as <GeoJSON/> does not redraw on data change.\n        // entire element needs to be re-rendered\n        this.setState({\n            element: null\n        });\n        this.updateData();\n    }\n\n    render() {\n        let transmissionLinesData = this.state.transmissionLinesData;\n        return (\n            <div>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {transmissionLinesData && transmissionLinesData.length > 0 &&\n                this.state.element\n                }\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport '../../App.css';\nimport {Map} from \"react-leaflet\";\nimport {PowerStationsMap} from \"./power-stations-map\";\nimport {makeGeoJson} from \"../grpc-client/grpc-querier\";\nimport {NaturalGasPipelinesMap} from \"./natural-gas-pipelines-map\";\nimport {HospitalsMap} from \"./hospitals-map\";\nimport {DamsMap} from \"./dams-map\";\nimport {TransmissionLinesMap} from \"./transmission-lines-map\";\n\nexport class MainMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            geoJson: null,\n        };\n        this.toggleDataset = this.toggleDataset.bind(this);\n    }\n\n    toggleDataset(dataset) {\n        const activeDatasets = this.props.activeDatasets;\n        return activeDatasets && activeDatasets.indexOf(dataset) > -1;\n    }\n\n    render() {\n        let mapRef = React.createRef();\n\n        // console.log(\"main-map's render():\", this.props.activeDatasets);\n\n        let enableHospitals = this.toggleDataset('hospitals');\n        let enableNaturalGasPipelines = this.toggleDataset('natural_gas_pipelines');\n        let enablePowerPlants = this.toggleDataset('power_plants');\n        let enableDams = this.toggleDataset('dams');\n        let enableTransmissionLines = this.toggleDataset('transmission_lines');\n\n        return (\n            <Map center={[42.2, -71.7]} zoom={8}\n                 onZoomEnd={() => {\n                     const bounds = mapRef.current.leafletElement.getBounds();\n                     const geoJson = makeGeoJson(bounds._southWest, bounds._northEast);\n                     this.setState({\n                         geoJson: geoJson\n                     });\n                 }}\n\n                 onMoveEnd={() => {\n                     if (mapRef && mapRef.current && mapRef.current.leafletElement) {\n                         const bounds = mapRef.current.leafletElement.getBounds();\n                         const geoJson = makeGeoJson(bounds._southWest, bounds._northEast);\n                         this.setState({\n                             geoJson: geoJson\n                         });\n                     }\n                 }}\n\n                 whenReady={() => {\n                     const bounds = mapRef.current.leafletElement.getBounds();\n                     const geoJson = makeGeoJson(bounds._southWest, bounds._northEast);\n                     this.setState({\n                         geoJson: geoJson\n                     });\n                 }}\n\n                 ref={mapRef}\n            >\n                {enableHospitals && <HospitalsMap geoJson={this.state.geoJson}/>}\n                {enableNaturalGasPipelines &&\n                <NaturalGasPipelinesMap geoJson={this.state.geoJson}/>}\n                {enablePowerPlants && <PowerStationsMap geoJson={this.state.geoJson}/>}\n                {enableDams && <DamsMap geoJson={this.state.geoJson}/>}\n                {enableTransmissionLines && <TransmissionLinesMap geoJson={this.state.geoJson}/>}\n            </Map>\n        );\n    }\n}","import React from 'react';\n\nimport {Container, Row, Col} from 'react-bootstrap';\nimport {MainNavbar} from \"./navbar\";\nimport {QueryConstructor} from \"./query-constructor\";\nimport {MainMap} from \"./maps/main-map\";\n\nconst {DatasetRequest} = require('./grpc-client/census_pb');\nconst {client, requestGeoJson} = require('./grpc-client/grpc-querier');\n\nexport default class Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeDatasets: []\n        };\n        this.addActiveDataset = this.addActiveDataset.bind(this);\n        this.removeActiveDataset = this.removeActiveDataset.bind(this);\n    }\n\n    addActiveDataset(dataset) {\n        const activeDatasets = [...this.state.activeDatasets];\n        activeDatasets.push(dataset);\n        this.setState({\n            activeDatasets: activeDatasets\n        });\n    }\n\n    removeActiveDataset(dataset) {\n        // console.log('removeActiveDataset:', dataset);\n        let activeDatasets = [...this.state.activeDatasets];\n        const index = activeDatasets.indexOf(dataset);\n        if (index > -1) {\n            activeDatasets.splice(index, 1);\n        }\n\n        // console.log('updatedActiveDatasets:', activeDatasets);\n        this.setState({\n            activeDatasets: activeDatasets\n        });\n    }\n\n    render() {\n        return <Container fluid>\n            <MainNavbar/>\n            <Row>\n                <Col className=\"col-lg-3\">\n                    <QueryConstructor\n                        addActiveDataset={this.addActiveDataset}\n                        removeActiveDataset={this.removeActiveDataset}\n                    />\n                </Col>\n                {/*<Col className=\"col-lg-9\">*/}\n                <Col>\n                    <MainMap activeDatasets={this.state.activeDatasets}\n                    />\n                </Col>\n            </Row>\n        </Container>\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Main from \"./sustain/main\";\n\n\nfunction App() {\n    return (\n        <Main/>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}